
package org.usfirst.frc.team6135.robot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ShapeMode;

import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	Joystick driveStick;
	Victor leftDrive;                     
	Victor rightDrive;
	CANTalon armLift;
	CANTalon armWinch;
	//Talon armExtend;
	Servo cameraRotate;
	Servo cameraTilt;
	double rightDriveSet;
    double leftDriveSet;
    int reverse = 1;
    int session;
    Image frame;
    double scale = 1;
    double deadZone;
    double leftDriveValue;
    double rightDriveValue;
    double xpositive;
    double xnegative;
    double ypositive;
    double ynegative;
    double prevXAxisVal;
    double prevYAxisVal;
    int debounceLoopCount;
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
	Encoder encoder;
	double sensitivity;
	int pulsesPerRevolution;
	CameraServer server;
	double cameraDeadZone;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        driveStick = new Joystick(0);
        leftDrive = new Victor(0);
        rightDrive = new Victor(1);
        deadZone = 0.1;
        debounceLoopCount = 0;
        pulsesPerRevolution = 1;
        //encoder = new Encoder(1, 2, true, Encoder.EncodingType.k4X);
        //encoder.setDistancePerPulse(8 * Math.PI);
        armWinch = new CANTalon(1);
        //armExtend = new Talon(7);
        armLift = new CANTalon(2);
        cameraRotate = new Servo(2);
        cameraTilt = new Servo(3);
        prevXAxisVal=0.0;
        prevYAxisVal=0.0;
        xpositive = 0.0;
        xnegative = 0.0;
        ypositive = 0.0;
        ynegative = 0.0;
        sensitivity = 0.3;
        cameraDeadZone = 0.5;
        server = CameraServer.getInstance();
        server.setQuality(50);
        //the camera name (ex "cam0") can be found through the roborio web interface
        server.startAutomaticCapture("cam0");
        armLift.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
        armWinch.changeControlMode(CANTalon.TalonControlMode.Follower);
        armWinch.set(armLift.getDeviceID());
        //cameraRotate.
        cameraRotate.set(0.5);
        cameraTilt.set(0.5);
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	leftDrive.set(1.0);
    	rightDrive.set(1.0);
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic(){
    	//leftDriveSet = driveStick.getRawAxis(1) - driveStick.getRawAxis(0);
    	//rightDriveSet = driveStick.getRawAxis(1) + driveStick.getRawAxis(0);
    	leftDriveSet = sensitivity * Math.pow((driveStick.getRawAxis(1) - driveStick.getRawAxis(0)),3) 
    				   + (1 - sensitivity) * ((driveStick.getRawAxis(1) - driveStick.getRawAxis(0)));
    	rightDriveSet = sensitivity * Math.pow((driveStick.getRawAxis(1) + driveStick.getRawAxis(0)),3) 
				   + (1 - sensitivity) * ((driveStick.getRawAxis(1) + driveStick.getRawAxis(0)));
    	if (driveStick.getRawButton(7)) {// && debounceLoopCount < 1) {
        	reverse = -1;
        	debounceLoopCount = 15;
        	System.out.println("Direction 1");
        }
    	else if(driveStick.getRawButton(8)) {
    		reverse = 1;
    		System.out.println("Direction 2");
    	}
    	/*if (debounceLoopCount > 0) {
    		debounceLoopCount--;
    	}*/
    	System.out.println("Debounce Loop: " + debounceLoopCount);
   		leftDriveValue = reverse * leftDriveSet;
   		rightDriveValue = reverse * rightDriveSet;
    	//Update motors
    	if (Math.abs(leftDriveValue) > deadZone && Math.abs(rightDriveValue) > deadZone) {
    		leftDrive.set(leftDriveValue); //Comment out for testing inputs
            rightDrive.set(rightDriveValue); //Comment out for testing inputs
            System.out.println("Driver values set");
    	}
    	else {
    		leftDrive.set(0);
            rightDrive.set(0);
            System.out.println("Driver values not set");
    	}
    	System.out.println("Left Drive Set: " + leftDriveSet);
    	System.out.println("Right Drive Set: " + rightDriveSet);
        System.out.println("Left Drive Value: " + leftDriveValue);
        System.out.println("Right Drive Value: " + rightDriveValue);
        System.out.println("End of loop");
        System.out.println();
        System.out.println();
        if ((prevXAxisVal = driveStick.getRawAxis(4)) > cameraDeadZone) {
        xpositive = Math.min(xpositive + 0.01, 1.0);
        }
        /*if(driveStick.getRawButton(9)) {
        	xpositive = 1.0;
        }
        if(driveStick.getRawButton(10)){
        	xpositive = 0.0;
        }*/
        if(prevXAxisVal < -cameraDeadZone)
        {
        	//if (driveStick.getRawAxis(4) < prevXAxisVal) {
                xpositive = Math.max(xpositive - 0.01, 0.0);
        	//else
        	/*{
        		if(Math.abs(driveStick.getAxis(4)-1.0)<10e-10)
        		{
        			
        		}
        		prevXAxisVal=driveStick.getRawAxis(4);
        	}*/
        }
        if ((prevYAxisVal = driveStick.getRawAxis(5)) > cameraDeadZone) {
        ypositive = Math.min(ypositive + 0.01, 1.0);
        }
        if (prevYAxisVal < -cameraDeadZone) {
        ypositive = Math.max(ypositive - 0.01, 0.0);
        }
    	cameraRotate.set(xpositive);
    	cameraTilt.set(ypositive);
    	System.out.println("Camera X: " + xpositive);
    	System.out.println("Camera Y: " + ypositive);
    	System.out.println("Pwm X: " + cameraRotate.getRaw());
    	System.out.println("Pwm Y: " + cameraTilt.getRaw());
    	
    	if(driveStick.getRawButton(1) && armLift.getOutputCurrent() < 58) {
        	armLift.set(1.0);
        }
        else if(driveStick.getRawButton(2)) {
        	armLift.set(-1.0);
        }
        else {
        	armLift.set(0.0);;
        }
        /*
        if(driveStick.getRawButton(3)) {
        	armWinch.set(1.0);
        }
        else if(driveStick.getRawButton(4)) {
        	armWinch.set(-1.0);
        }
        else {
        	armWinch.set(0.0);
        }*/
        /*if(driveStick.getRawButton(5)) {
        	armExtend.set(1.0);
        }
        else if(driveStick.getRawButton(6)) {
        	armExtend.set(-1.0);
        }
        else {
        	armExtend.set(0.0);
        }*/
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
}
