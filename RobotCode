

package org.usfirst.frc.team6135.robot;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ni.vision.NIVision.Image;

import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CameraServer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	Joystick driveStick;
	Victor leftDrive;                     
	Victor rightDrive;
	Victor armWinch;
	CANTalon rightArmRotate;
	CANTalon leftArmRotate;
	//Talon armExtend;
	Servo cameraRotate;
	Servo cameraTilt;
	Servo lockWinch;
	RobotDrive test;
    int reverse;
    
    int session;
    Image frame;
    double deadZone;
    double leftDriveValue;
    double rightDriveValue;
    double xCamera;
    double yCamera;
    double xSensitivity;
    double ySensitivity;
    double prevXAxisVal;
    double prevYAxisVal;
    int debounceLoopCount;
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
	Encoder encoder;
	double sensitivity;
	int pulsesPerRevolution;
	CameraServer server;
	double cameraDeadZone;
	double xInput;
	double yInput;
	int sensitivityXLoop;
	int sensitivityYLoop;
	int cameraLoopCount;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        driveStick = new Joystick(0);
        leftDrive = new Victor(0);
        rightDrive = new Victor(1);
        armWinch = new Victor(2);
        deadZone = 0.1;
        debounceLoopCount = 0;
        cameraLoopCount = 0;
        pulsesPerRevolution = 1;
        reverse = -1;
        //encoder = new Encoder(1, 2, true, Encoder.EncodingType.k4X);
        //encoder.setDistancePerPulse(8 * Math.PI);
        leftArmRotate = new CANTalon(1);
        //armExtend = new Talon(7);
        rightArmRotate = new CANTalon(2);
        cameraRotate = new Servo(2);
        cameraTilt = new Servo(3);
        lockWinch = new Servo(4);
        prevXAxisVal = 0.0;
        prevYAxisVal = 0.0;
        xCamera = 0.5;
        yCamera = 0.5;
        sensitivityXLoop = 0;
        sensitivityYLoop = 0;
        sensitivity = 1.0;
        cameraDeadZone = 0.5;
        server = CameraServer.getInstance();
        server.setQuality(50);
        //the camera name (ex "cam0") can be found through the roborio web interface
        server.startAutomaticCapture("cam0");
        rightArmRotate.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
        leftArmRotate.changeControlMode(CANTalon.TalonControlMode.Follower);
        leftArmRotate.set(rightArmRotate.getDeviceID());
        //cameraRotate.
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	leftDrive.set(0.4);
    	rightDrive.set(0.4);
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic(){
    	//test.arcadeDrive(driveStick.getRawAxis(0), driveStick.getRawAxis(1), true);
    	xSensitivity = sensitivity * Math.pow(xInput = driveStick.getRawAxis(0), 3)
    			+ (1 - sensitivity) * xInput;
    	ySensitivity = sensitivity * Math.pow(yInput = driveStick.getRawAxis(1), 3)
    			+ (1 - sensitivity) * yInput;
    	if(xSensitivity > 0.7 && sensitivityXLoop < 15) {// && !driveStick.getRawButton(6)) {
    		xSensitivity = 0.7 + (xSensitivity - 0.7) * (sensitivityXLoop / 15.0);
    		sensitivityXLoop++;
    	}
    	if(xSensitivity < -0.7 && sensitivityXLoop < 15) {
    		xSensitivity = -0.7 + (xSensitivity + 0.7) * (sensitivityXLoop / 15.0);
    		sensitivityXLoop++;
    	}
    	if(Math.abs(xSensitivity) <= 0.7) {
    		sensitivityXLoop = 0;
    	}
    	if(ySensitivity > 0.7 && sensitivityYLoop < 15) {
    		ySensitivity = 0.7 + (ySensitivity - 0.7) * (sensitivityYLoop / 15.0);
    		sensitivityYLoop++;
    	}
    	if(ySensitivity < -0.7 && sensitivityYLoop < 15) {
    		ySensitivity = -0.7 + (ySensitivity + 0.7) * (sensitivityYLoop / 15.0);
    		sensitivityYLoop++;
    	}
    	if(Math.abs(ySensitivity) <= 0.7) {
    		sensitivityYLoop = 0;
    	}
    	/*if (driveStick.getRawButton(7)) {// && debounceLoopCount < 1) {
    		
        	reverse = 1;
        	//debounceLoopCount = 15;
        	System.out.println("Direction 1");
        }
    	else if(driveStick.getRawButton(8)) {
    		reverse = -1;
    		System.out.println("Direction 2");
    	}*/
    	leftDriveValue = reverse * ySensitivity + xSensitivity;
    	rightDriveValue = reverse * ySensitivity - xSensitivity;
    	/*leftDriveSet = sensitivity * Math.pow((driveStick.getRawAxis(1) - driveStick.getRawAxis(0)),3) 
    				   + (1 - sensitivity) * ((driveStick.getRawAxis(1) - driveStick.getRawAxis(0)));
    	rightDriveSet = sensitivity * Math.pow((driveStick.getRawAxis(1) + driveStick.getRawAxis(0)),3) 
				   + (1 - sensitivity) * ((driveStick.getRawAxis(1) + driveStick.getRawAxis(0)));*/
    	
    	/*if (debounceLoopCount > 0) {
    		debounceLoopCount--;
    	}*/
    	//System.out.println("Debounce Loop: " + debounceLoopCount);
    	//Update motors
    	if (Math.abs(leftDriveValue) > deadZone && Math.abs(rightDriveValue) > deadZone) {
    		//leftDrive.set(leftDriveValue); //Comment out for testing inputs
            //rightDrive.set(rightDriveValue); //Comment out for testing inputs
            //System.out.println("Driver values set");
    	}
    	else {
    		leftDrive.set(0);
            rightDrive.set(0);
            //System.out.println("Driver values not set");
    	}
    	if ((prevXAxisVal = driveStick.getRawAxis(4)) > cameraDeadZone) {
    		if (xCamera >= 1.0){
    			xCamera = 1.0;
    		}
    		xCamera += 0.01;
    	}
    	else if ((prevXAxisVal = driveStick.getRawAxis(4)) < -cameraDeadZone) {
    		if (xCamera <= 0.0){
    			xCamera = 0.0;
    		}
    		xCamera -= 0.01;
    	}
    	if ((prevYAxisVal = driveStick.getRawAxis(5)) > cameraDeadZone) {
    		if (yCamera >= 1.0){
    			yCamera = 1.0;
    		}
    		yCamera += 0.01;
    	}
    	else if ((prevYAxisVal = driveStick.getRawAxis(5)) < -cameraDeadZone) {
    		if (yCamera <= 0.0){
    			yCamera = 0.0;
    		}
    		yCamera -= 0.01;
    	}
        /*if ((prevXAxisVal = driveStick.getRawAxis(4)) > cameraDeadZone && cameraLoopCount < 15) {
        	xCamera = Math.min(xCamera - 0.01, 1.0);
        	cameraLoopCount++;
        }
        else if(prevXAxisVal < -cameraDeadZone && cameraLoopCount < 15) {
          	cameraLoopCount++;
            xCamera = Math.max(xCamera + 0.01, 0.0);
        }
        else {
        	cameraLoopCount = 0;
        }
        if ((prevYAxisVal = driveStick.getRawAxis(5)) > cameraDeadZone && cameraLoopCount < 15) {
        	yCamera = Math.min(yCamera + 0.01, 1.0); 
        	cameraLoopCount++;
        }
        else if (prevYAxisVal < -cameraDeadZone && cameraLoopCount < 15) {
        	yCamera = Math.max(yCamera - 0.01, 0.0);
        	cameraLoopCount++;
        }
        else {
        	cameraLoopCount = 0;
        }*/
        if(driveStick.getRawButton(10)){
        	xCamera = 0.33;
        	yCamera = 0.61;
        }
    	cameraRotate.set(xCamera);
    	cameraTilt.set(yCamera);
    	System.out.println("Joystick X Input: " + xInput);
    	System.out.println("Joystick Y Input: " + yInput);
    	System.out.println("Left Drive Sensitivity: " + xSensitivity);
    	System.out.println("Right Drive Sensitivity: " + ySensitivity);
        System.out.println("Left Drive Value: " + leftDriveValue);
        System.out.println("Right Drive Value: " + rightDriveValue);
    	System.out.println("Camera X: " + xCamera);
    	System.out.println("Camera Y: " + yCamera);
    	System.out.println("Pwm X: " + cameraRotate.getRaw());
    	System.out.println("Pwm Y: " + cameraTilt.getRaw());
    	System.out.println("End of loop");
        System.out.println();
        System.out.println();
    	if(driveStick.getRawButton(1) && rightArmRotate.getOutputCurrent() < 58) {
        	rightArmRotate.set(1.0);
        }
        else if(driveStick.getRawButton(2)) {
        	rightArmRotate.set(-1.0);
        }
        else {
        	rightArmRotate.set(0.0);;
        }
    	if(driveStick.getRawButton(3)) {
    		armWinch.set(0.5);
    	}
    	if(driveStick.getRawButton(4)) {
    		armWinch.set(-0.5);
    		lockWinch.set(1.0);
    	}
        /*
        if(driveStick.getRawButton(3)) {
        	leftArmRotate.set(1.0);
        }
        else if(driveStick.getRawButton(4)) {
        	leftArmRotate.set(-1.0);
        }
        else {
        	leftArmRotate.set(0.0);
        }*/
        /*if(driveStick.getRawButton(5)) {
        	armExtend.set(1.0);
        }
        else if(driveStick.getRawButton(6)) {
        	armExtend.set(-1.0);
        }
        else {
        	armExtend.set(0.0);
        }*/
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
}
